@model IslamiTexts.Models.SearchResults

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<br />
<div class="container">
    <div class="col-md-10 col-lg-8">
        <div class="list-group">
            @foreach (ISearchResult resultItem in Model.ResultItems)
            {
                switch (resultItem.ResultType)
                {
                    case ContentType.Verse:
                        VerseResult verseResult = (VerseResult)resultItem;

                        <a href="/quran/@verseResult.SurahNo/@verseResult.VerseNo" class="list-group-item list-group-item-action">
                            <p class="arabic-verse">@verseResult.ArabicText</p>
                            <p>@Html.Raw(verseResult.Translation) (@verseResult.SurahNo:@verseResult.VerseNo)</p>
                        </a>
                        break;

                    case ContentType.VerseCommentary:
                        VerseCommentaryResult commentaryResult = (VerseCommentaryResult)resultItem;

                        <a href="http://www.bing.com" class="list-group-item list-group-item-action">
                            <p>@Html.Raw(commentaryResult.Snippets[0])</p>
                            <p>@commentaryResult.SurahNo:@commentaryResult.VerseNo</p>
                        </a>
                        break;

                    default:
                        break;
                }
            }
        </div>
        <nav aria-label="Page navigation">
            <ul class="pagination">
                @{
                    IslamiTexts.Common.Web.Pagination pagination =
                        new IslamiTexts.Common.Web.Pagination(Model, 10);

                    if (pagination.CurrentPageNo == 1)
                    {
                        @*<li class="disabled">
                            <a href="#" aria-label="Previous"><span aria-hidden="true">&laquo;</span></a>
                        </li>*@
                        <li class="disabled">
                            <span aria-hidden="true">&laquo;</span>
                        </li>
                    }
                    else
                    {
                        int previousStart = pagination.FirstItemIndex - pagination.PageSize;
                        <li>
                            <a href="/search?q=@ViewData[Constants.QueryKey]&start=@previousStart" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    }

                    for (int pageNo = pagination.FirstPageNoToShow; pageNo < pagination.LastPageNoToShow; pageNo++)
                    {
                        string activeClass = pageNo == pagination.CurrentPageNo ? "active" : null;
                        int start = (pageNo - 1) * pagination.PageSize;
                        <li class="@activeClass"><a href="/search?q=@ViewData[Constants.QueryKey]&start=@start">@pageNo</a></li>
                    }

                    if (pagination.CurrentPageNo < pagination.LastPageNoToShow)
                    {
                        int nextStart = pagination.FirstItemIndex + pagination.PageSize;
                        <li><a href="/search?q=@ViewData[Constants.QueryKey]&start=@nextStart" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span></a>
                        </li>
                    }
                    else
                    {
                        @*<li class="disabled"><a href="#" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span></a></li>*@
                        <li class="disabled">
                            <span aria-hidden="true">&raquo;</span>
                        </li>
                    }
                }
            </ul>
        </nav>
    </div>
</div>
